diff --git a/dist/TtyPassphraseEntry.d.ts b/dist/TtyPassphraseEntry.d.ts
deleted file mode 100644
index 46be04048113b3b5c8c494b6227218a7c0608c48..0000000000000000000000000000000000000000
--- a/dist/TtyPassphraseEntry.d.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-/// <reference types="node" resolution-mode="require"/>
-import { KeyId } from "./KeyId.js";
-import { Passphrase, PassphraseEntry } from "./PassphraseEntry.js";
-import { Readable, Writable } from "node:stream";
-export interface PassphraseReaderOptions {
-    input: Readable;
-    output: Writable;
-    mask: string | false;
-}
-export declare function readPassphrase(prompt: string, { input, output, mask }: PassphraseReaderOptions): Promise<Passphrase>;
-interface TtyPassphraseEntryOptions extends PassphraseReaderOptions {
-    locale: string;
-}
-export declare class TtyPassphraseEntry implements PassphraseEntry {
-    #private;
-    constructor(options?: Partial<TtyPassphraseEntryOptions>);
-    authenticate(keyId: KeyId, firstAttempt: boolean): Promise<Passphrase>;
-    configurePassphrase(): Promise<Passphrase>;
-}
-export {};
diff --git a/dist/index.browser.mjs b/dist/index.browser.mjs
index b42b341ddc34620095fe7dc31b61e291ece72551..5a40b55388aade2a138900bd465a1beea41bfc92 100644
--- a/dist/index.browser.mjs
+++ b/dist/index.browser.mjs
@@ -15,128 +15,13 @@ function generateKeyId() {
 }
 __name(generateKeyId, "generateKeyId");
 
-// src/TtyPassphraseEntry.ts
-import * as readline from "node:readline";
-import { Writable } from "node:stream";
-function isNewLine(chunk) {
-  return typeof chunk === "string" && chunk.endsWith("\n") || chunk instanceof Buffer && chunk.at(chunk.length - 1) === 10;
-}
-__name(isNewLine, "isNewLine");
-function readPassphrase(prompt, { input, output, mask }) {
-  let masking = false;
-  const rl = readline.createInterface({
-    input,
-    output: new Writable({
-      write: (chunk, encoding, callback) => {
-        if (masking && !isNewLine(chunk)) {
-          output.write(
-            mask,
-            encoding.endsWith("buffer") ? "utf8" : encoding,
-            callback
-          );
-        } else
-          output.write(chunk, encoding, callback);
-      }
-    }),
-    terminal: true
-  });
-  return new Promise((resolve) => {
-    rl.question(prompt, (answer) => {
-      rl.close();
-      resolve(answer);
-    });
-    setTimeout(() => masking = mask !== false, 0);
-  });
-}
-__name(readPassphrase, "readPassphrase");
-var prompts = {
-  authenticate: {
-    "": "Passphrase for {keyId}: ",
-    ko: "{keyId} \uD0A4\uC758 \uC554\uD638: ",
-    qts: "AUTHENTICATE:{keyId}"
-    // for unit test
-  },
-  authenticateRetry: {
-    "": "Incorrect; try again: ",
-    ko: "\uD2C0\uB9BC. \uC7AC\uC2DC\uB3C4: ",
-    qts: "AUTHENTICATE_RETRY:{keyId}"
-    // for unit test
-  },
-  configurePassphrase: {
-    "": "New passphrase: ",
-    ko: "\uC0C8 \uC554\uD638: ",
-    qts: "CONFIGURE_PASSPHRASE"
-    // for unit test
-  },
-  configurePassphraseRetry: {
-    "": "Mismatch; new passphrase: ",
-    ko: "\uD2C0\uB9BC. \uC0C8 \uC554\uD638 \uC7AC\uC785\uB825:",
-    qts: "CONFIGURE_PASSPHRASE_RETRY"
-    // for unit test
-  },
-  confirmConfigurePassphrase: {
-    "": "Confirm passphrase: ",
-    ko: "\uC554\uD638 \uD655\uC778:",
-    qts: "CONFIRM_CONFIGURE_PASSPHRASE"
-    // for unit test
-  }
-};
-function getLocale() {
-  return Intl.DateTimeFormat().resolvedOptions().locale;
-}
-__name(getLocale, "getLocale");
-var TtyPassphraseEntry = class {
-  #options;
-  constructor(options = {}) {
-    this.#options = {
-      input: options.input ?? process.stdin,
-      output: options.output ?? process.stdout,
-      mask: options.mask ?? "*",
-      locale: options.locale ?? getLocale()
-    };
-  }
-  #getPrompt(promptType) {
-    const table = prompts[promptType];
-    let locale = this.#options.locale;
-    let msg;
-    while (msg == null) {
-      msg = table[locale];
-      locale = locale.replace(/(^|[-_.])[^-_.]*$/, "");
-    }
-    return msg;
-  }
-  authenticate(keyId, firstAttempt) {
-    const message = this.#getPrompt(
-      firstAttempt ? "authenticate" : "authenticateRetry"
-    );
-    const prompt = message.replace(/\{keyId\}/g, keyId);
-    return readPassphrase(prompt, this.#options);
-  }
-  async configurePassphrase() {
-    let prompt = this.#getPrompt("configurePassphrase");
-    const retryPrompt = this.#getPrompt("configurePassphraseRetry");
-    const confirmPrompt = this.#getPrompt("confirmConfigurePassphrase");
-    while (true) {
-      const passphrase = await readPassphrase(prompt, this.#options);
-      const confirmPassphrase = await readPassphrase(
-        confirmPrompt,
-        this.#options
-      );
-      if (passphrase === confirmPassphrase)
-        return passphrase;
-      prompt = retryPrompt;
-    }
-  }
-};
-__name(TtyPassphraseEntry, "TtyPassphraseEntry");
-
 // src/Web3Account.ts
 import {
   Address,
   RawPrivateKey
 } from "@planetarium/account";
 import { pbkdf2Async } from "@noble/hashes/pbkdf2";
-import { scrypt } from "scrypt-js";
+import scrypt from "scrypt-js";
 import { sha256 } from "@noble/hashes/sha256";
 import { keccak_256 } from "@noble/hashes/sha3";
 var Web3Account = class {
@@ -315,7 +200,7 @@ async function deriveKey(kdf, passphrase) {
   } else if (kdf.kdf === "scrypt") {
     const { dklen, n, p, r, salt } = kdf.kdfparams;
     const passphraseBytes = passphrase instanceof Uint8Array ? passphrase : new TextEncoder().encode(passphrase);
-    return scrypt(passphraseBytes, Buffer.from(salt, "hex"), n, r, p, dklen);
+    return await scrypt.scrypt(passphraseBytes, Buffer.from(salt, "hex"), n, r, p, dklen);
   }
   throw new Error(`Unsupported kdf: ${kdf["kdf"]}`);
 }
@@ -656,7 +541,6 @@ var Web3KeyStore = class {
 };
 __name(Web3KeyStore, "Web3KeyStore");
 export {
-  TtyPassphraseEntry,
   WeakPrivateKeyError,
   Web3Account,
   Web3KeyStore,
diff --git a/dist/index.mjs b/dist/index.mjs
index 113e83518aded34546c290dfc1a5fc604e20d21a..48002ddcae091a1dffe93aae34741778880e111d 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -144,7 +144,7 @@ import {
   RawPrivateKey
 } from "@planetarium/account";
 import { pbkdf2Async } from "@noble/hashes/pbkdf2";
-import { scrypt } from "scrypt-js";
+import scrypt from "scrypt-js";
 import { sha256 } from "@noble/hashes/sha256";
 import { keccak_256 } from "@noble/hashes/sha3";
 var Web3Account = class {
@@ -323,7 +323,7 @@ async function deriveKey(kdf, passphrase) {
   } else if (kdf.kdf === "scrypt") {
     const { dklen, n, p, r, salt } = kdf.kdfparams;
     const passphraseBytes = passphrase instanceof Uint8Array ? passphrase : new TextEncoder().encode(passphrase);
-    return scrypt(passphraseBytes, Buffer.from(salt, "hex"), n, r, p, dklen);
+    return await scrypt.scrypt(passphraseBytes, Buffer.from(salt, "hex"), n, r, p, dklen);
   }
   throw new Error(`Unsupported kdf: ${kdf["kdf"]}`);
 }
