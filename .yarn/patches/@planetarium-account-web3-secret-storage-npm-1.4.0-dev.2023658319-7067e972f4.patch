diff --git a/dist/index.browser.mjs b/dist/index.browser.mjs
index b42b341ddc34620095fe7dc31b61e291ece72551..d30c197895102763258df3ed2dee0b4a983c9114 100644
--- a/dist/index.browser.mjs
+++ b/dist/index.browser.mjs
@@ -15,121 +15,6 @@ function generateKeyId() {
 }
 __name(generateKeyId, "generateKeyId");
 
-// src/TtyPassphraseEntry.ts
-import * as readline from "node:readline";
-import { Writable } from "node:stream";
-function isNewLine(chunk) {
-  return typeof chunk === "string" && chunk.endsWith("\n") || chunk instanceof Buffer && chunk.at(chunk.length - 1) === 10;
-}
-__name(isNewLine, "isNewLine");
-function readPassphrase(prompt, { input, output, mask }) {
-  let masking = false;
-  const rl = readline.createInterface({
-    input,
-    output: new Writable({
-      write: (chunk, encoding, callback) => {
-        if (masking && !isNewLine(chunk)) {
-          output.write(
-            mask,
-            encoding.endsWith("buffer") ? "utf8" : encoding,
-            callback
-          );
-        } else
-          output.write(chunk, encoding, callback);
-      }
-    }),
-    terminal: true
-  });
-  return new Promise((resolve) => {
-    rl.question(prompt, (answer) => {
-      rl.close();
-      resolve(answer);
-    });
-    setTimeout(() => masking = mask !== false, 0);
-  });
-}
-__name(readPassphrase, "readPassphrase");
-var prompts = {
-  authenticate: {
-    "": "Passphrase for {keyId}: ",
-    ko: "{keyId} \uD0A4\uC758 \uC554\uD638: ",
-    qts: "AUTHENTICATE:{keyId}"
-    // for unit test
-  },
-  authenticateRetry: {
-    "": "Incorrect; try again: ",
-    ko: "\uD2C0\uB9BC. \uC7AC\uC2DC\uB3C4: ",
-    qts: "AUTHENTICATE_RETRY:{keyId}"
-    // for unit test
-  },
-  configurePassphrase: {
-    "": "New passphrase: ",
-    ko: "\uC0C8 \uC554\uD638: ",
-    qts: "CONFIGURE_PASSPHRASE"
-    // for unit test
-  },
-  configurePassphraseRetry: {
-    "": "Mismatch; new passphrase: ",
-    ko: "\uD2C0\uB9BC. \uC0C8 \uC554\uD638 \uC7AC\uC785\uB825:",
-    qts: "CONFIGURE_PASSPHRASE_RETRY"
-    // for unit test
-  },
-  confirmConfigurePassphrase: {
-    "": "Confirm passphrase: ",
-    ko: "\uC554\uD638 \uD655\uC778:",
-    qts: "CONFIRM_CONFIGURE_PASSPHRASE"
-    // for unit test
-  }
-};
-function getLocale() {
-  return Intl.DateTimeFormat().resolvedOptions().locale;
-}
-__name(getLocale, "getLocale");
-var TtyPassphraseEntry = class {
-  #options;
-  constructor(options = {}) {
-    this.#options = {
-      input: options.input ?? process.stdin,
-      output: options.output ?? process.stdout,
-      mask: options.mask ?? "*",
-      locale: options.locale ?? getLocale()
-    };
-  }
-  #getPrompt(promptType) {
-    const table = prompts[promptType];
-    let locale = this.#options.locale;
-    let msg;
-    while (msg == null) {
-      msg = table[locale];
-      locale = locale.replace(/(^|[-_.])[^-_.]*$/, "");
-    }
-    return msg;
-  }
-  authenticate(keyId, firstAttempt) {
-    const message = this.#getPrompt(
-      firstAttempt ? "authenticate" : "authenticateRetry"
-    );
-    const prompt = message.replace(/\{keyId\}/g, keyId);
-    return readPassphrase(prompt, this.#options);
-  }
-  async configurePassphrase() {
-    let prompt = this.#getPrompt("configurePassphrase");
-    const retryPrompt = this.#getPrompt("configurePassphraseRetry");
-    const confirmPrompt = this.#getPrompt("confirmConfigurePassphrase");
-    while (true) {
-      const passphrase = await readPassphrase(prompt, this.#options);
-      const confirmPassphrase = await readPassphrase(
-        confirmPrompt,
-        this.#options
-      );
-      if (passphrase === confirmPassphrase)
-        return passphrase;
-      prompt = retryPrompt;
-    }
-  }
-};
-__name(TtyPassphraseEntry, "TtyPassphraseEntry");
-
 // src/Web3Account.ts
 import {
   Address,
@@ -656,7 +541,6 @@ var Web3KeyStore = class {
 };
 __name(Web3KeyStore, "Web3KeyStore");
 export {
-  TtyPassphraseEntry,
   WeakPrivateKeyError,
   Web3Account,
   Web3KeyStore,
